plugins {
    id 'com.android.application'
    // id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
   // id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'com.diffplug.spotless'
    id 'com.vanniktech.android.junit.jacoco'
    id 'com.google.gms.google-services'
}

/*def v_code = null
def v_name = null
def releaseID = "yes"
def mapsApiVal

boolean invalidateBuildVariant = false

Properties properties = new Properties()
properties.load(project.rootProject.file('config.prop').newDataInputStream())*/

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.kavin.artgallery"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 5
        versionName "0.0.5"
        /*resValue "string", "app_name", "Art Gallery"
        mapsApiVal = properties.getProperty("google_maps_api_key_common")
        manifestPlaceholder = [MAPS_API_KEY: mapsApiVal, appAuthRedirectScheme: "appAuthRedirectScheme"]*/
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    /*if (project.hasProperty("verCode") && project.hasProperty("verName")) {
        v_code = verCode
        v_name = verName
    }

    if (project.hasProperty("RELEASE")) {
        releaseID = RELEASE
    }

    if (project.hasProperty("demoapp")) {
        IS_DEMO_APP = demoapp
    }*/

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField "String", "API_ID", "\"${project.apiId}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_ID", "\"${project.apiId}\""
        }
    }

    /*variantFilter { variant ->
        if(variant.builtType.name.equals('test')) {
            variant.setIgnore(true)
        }
    }*/

    //flavorDimensions "market"

    /*productFlavours {
        de {
            applicationId "com.kavin.artgallery.de"
            if (releaseID == "yes") {
                applicationId "com.kvn.artgallery.de"
                mapsApiVal = properties.getProperty("google_maps_api_key_de")
                manifestPlaceholder = [MAPS_API_KEY: mapsApiVal]
            }
            buildConfigField "String", "FLAVOR_ID", "\"SG\""
            versionCode 5
            versionName "5.0"
            dimension "market"
        }
        bt {
            applicationId "com.kavin.artgallery.bt"
            if (releaseID == "yes") {
                applicationId "com.kvn.artgallery.bt"
                mapsApiVal = properties.getProperty("google_maps_api_key_de")
                manifestPlaceholder = [MAPS_API_KEY: mapsApiVal]
            }
            buildConfigField "String", "FLAVOR_ID", "\"BT\""
            versionCode 5
            versionName "5.0"
            dimension "market"
        }
    }*/

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"

       /* main {
            res.srcDirs = ['src/main/res', 'res/main/libs']
            assets.srcDirs = ['src/main/assets', 'res/main/assets/']
        }
        de {
            res.srcDirs = ['src/de/res']
        }
        bt {
            res.srcDirs = ['src/bt/res']
        }*/
    }

    /*gradle.taskGraph.beforeTask { Task task ->
        if(task.name ==~ /process.*GoogleServices/) {
            android.applicationVariants.every { variant ->
                def currentFlavourName = variant.productFlavours.get(0).name.toUpperCase()
                def currentBuildType = variant.buildType.name
                doFCMChange(currentFlavourName, currentBuildType)
            }
        }
    }*/

   /*afterEvaluate {
       applicationVariants.all { variant ->

       }
   }*/
    buildFeatures {
        viewBinding = true
    }
    androidExtensions {
        features = ["parcelize"]
    }
    lintOptions {
        disable "UnsafeExperimentalUsageError", "UnsafeExperimentalUsageWarning"
    }
}

ext.cleanOutput = { outfileVal, isZipAligned ->
    /*File outFile = outfileVal.outputFile
    if(isZipAligned && (outFile.getName().contains("unsigned"))
        || (outFile.getName().contains("unaligned")
        && !outFile.getName().contains("release"))) {
        println "deleting " + outFile.getName()
        outFile.delete()
    }
    if (invalidateBuildVariant) {
        File fileAPK = outFile.outputFile
        println "\n*************************\nDeleting invalid apk due to missing dynamic configuration for " +
                "$output.baseName " + fileAPK.getName()
        fileAPK.delete()
    }*/
}

def doFCMChange(currentFlavorName, currentBuildType) {
    /*def TRGT_FCM_DIR = "./"
    // remove google-services.json if exist
    File fileFcmif = file(TRGT_FCM_DIR)
    if (fileFcmif.exists()) {
        for(File file : fileFcmif.listFiles()) {
            def fNametemp = file.getName()
            if(file.getName() == 'google-services.json') {
                def fName = file.getName()
                println "\n Deleting $Name"
                file.delete()
                break
            }
        }
    }

    def FCM_CONFIG_PATH = '../env' + currentFlavorName + '/release/fcm_config'
    switch (currentBuildType) {
        case "release":
            break
        default:
            FCM_CONFIG_PATH = '../env' + currentFlavorName + '/dev/fcm_config'
            break
    }

    File fileFcmConfig = file(FCM_CONFIG_PATH)
    if(!fileFcmConfig.exists()) {
        logger.error("ERROR : FileNotFound $FCM_CONFIG_PATH not found for given environment. " +
                "\n Aborting build. Please update config and start build again...")
    }

    copy {
        from FCM_CONFIG_PATH
        into TRGT_FCM_DIR
    }*/
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.recyclerview:recyclerview:1.2.0-beta02"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Architecture
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Retrofit
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:26.7.0')
    implementation 'com.google.firebase:firebase-analytics-ktx:20.1.2'

    // Third-party
    implementation 'com.google.android:flexbox:2.0.1'
    implementation "io.coil-kt:coil:1.1.1"
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    implementation 'com.adobe.marketing.mobile:sdk-core:1.+'
    implementation 'com.adobe.marketing.mobile:analytics:1.+'
    implementation 'com.adobe.marketing.mobile:userprofile:1.+'
    implementation 'com.adobe.marketing.mobile:target:1.+'
    implementation 'com.adobe.marketing.mobile:assurance:1.+'

    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "io.mockk:mockk:1.10.6"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "io.mockk:mockk-android:1.10.6"
}

spotless {
    kotlin {
        target '**/*.kt'
        targetExclude("$buildDir/**/*.kt")
        targetExclude('bin/**/*.kt')

        ktlint("0.40.0")
        licenseHeaderFile rootProject.file('spotless/copyright.kt')
    }
}

junitJacoco {
    jacocoVersion = '0.8.2'
    includeNoLocationClasses = false
    includeInstrumentationCoverageInMergedReport = true
    excludes = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory.*',
            '**/*Fragment*.*',
            '**/*Activity*.*',
            '**/*Adapter*.*',
            '**/*ViewPager*.*',
            '**/*ViewHolder*.*',
            '**/*Module*.*'
    ]
}